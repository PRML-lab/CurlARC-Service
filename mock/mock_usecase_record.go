// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/record.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "CurlARC/internal/domain/entity"
	response "CurlARC/internal/handler/response"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRecordUsecase is a mock of RecordUsecase interface.
type MockRecordUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRecordUsecaseMockRecorder
}

// MockRecordUsecaseMockRecorder is the mock recorder for MockRecordUsecase.
type MockRecordUsecaseMockRecorder struct {
	mock *MockRecordUsecase
}

// NewMockRecordUsecase creates a new mock instance.
func NewMockRecordUsecase(ctrl *gomock.Controller) *MockRecordUsecase {
	mock := &MockRecordUsecase{ctrl: ctrl}
	mock.recorder = &MockRecordUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordUsecase) EXPECT() *MockRecordUsecaseMockRecorder {
	return m.recorder
}

// AppendEndData mocks base method.
func (m *MockRecordUsecase) AppendEndData(recordId, userId string, endsData []entity.DataPerEnd) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendEndData", recordId, userId, endsData)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendEndData indicates an expected call of AppendEndData.
func (mr *MockRecordUsecaseMockRecorder) AppendEndData(recordId, userId, endsData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendEndData", reflect.TypeOf((*MockRecordUsecase)(nil).AppendEndData), recordId, userId, endsData)
}

// CreateRecord mocks base method.
func (m *MockRecordUsecase) CreateRecord(userId, teamId, enemyTeamName, place string, result entity.Result, date time.Time) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", userId, teamId, enemyTeamName, place, result, date)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockRecordUsecaseMockRecorder) CreateRecord(userId, teamId, enemyTeamName, place, result, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockRecordUsecase)(nil).CreateRecord), userId, teamId, enemyTeamName, place, result, date)
}

// DeleteRecord mocks base method.
func (m *MockRecordUsecase) DeleteRecord(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockRecordUsecaseMockRecorder) DeleteRecord(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockRecordUsecase)(nil).DeleteRecord), id)
}

// GetRecordDetailsByRecordId mocks base method.
func (m *MockRecordUsecase) GetRecordDetailsByRecordId(recordId string) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordDetailsByRecordId", recordId)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordDetailsByRecordId indicates an expected call of GetRecordDetailsByRecordId.
func (mr *MockRecordUsecaseMockRecorder) GetRecordDetailsByRecordId(recordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordDetailsByRecordId", reflect.TypeOf((*MockRecordUsecase)(nil).GetRecordDetailsByRecordId), recordId)
}

// GetRecordIndicesByTeamId mocks base method.
func (m *MockRecordUsecase) GetRecordIndicesByTeamId(teamId string) (*[]response.RecordIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordIndicesByTeamId", teamId)
	ret0, _ := ret[0].(*[]response.RecordIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordIndicesByTeamId indicates an expected call of GetRecordIndicesByTeamId.
func (mr *MockRecordUsecaseMockRecorder) GetRecordIndicesByTeamId(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordIndicesByTeamId", reflect.TypeOf((*MockRecordUsecase)(nil).GetRecordIndicesByTeamId), teamId)
}

// GetRecordsByTeamId mocks base method.
func (m *MockRecordUsecase) GetRecordsByTeamId(teamId string) (*[]entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsByTeamId", teamId)
	ret0, _ := ret[0].(*[]entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsByTeamId indicates an expected call of GetRecordsByTeamId.
func (mr *MockRecordUsecaseMockRecorder) GetRecordsByTeamId(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsByTeamId", reflect.TypeOf((*MockRecordUsecase)(nil).GetRecordsByTeamId), teamId)
}

// SetVisibility mocks base method.
func (m *MockRecordUsecase) SetVisibility(recordId, userId string, isPublic bool) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVisibility", recordId, userId, isPublic)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVisibility indicates an expected call of SetVisibility.
func (mr *MockRecordUsecaseMockRecorder) SetVisibility(recordId, userId, isPublic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVisibility", reflect.TypeOf((*MockRecordUsecase)(nil).SetVisibility), recordId, userId, isPublic)
}

// UpdateRecord mocks base method.
func (m *MockRecordUsecase) UpdateRecord(recordId, userId, enemyTeamName, place string, endsData []entity.DataPerEnd, date time.Time, isFirst, isPublic bool) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", recordId, userId, enemyTeamName, place, endsData, date, isFirst, isPublic)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockRecordUsecaseMockRecorder) UpdateRecord(recordId, userId, enemyTeamName, place, endsData, date, isFirst, isPublic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockRecordUsecase)(nil).UpdateRecord), recordId, userId, enemyTeamName, place, endsData, date, isFirst, isPublic)
}
