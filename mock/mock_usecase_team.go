// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/team.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "CurlARC/internal/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTeamUsecase is a mock of TeamUsecase interface.
type MockTeamUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTeamUsecaseMockRecorder
}

// MockTeamUsecaseMockRecorder is the mock recorder for MockTeamUsecase.
type MockTeamUsecaseMockRecorder struct {
	mock *MockTeamUsecase
}

// NewMockTeamUsecase creates a new mock instance.
func NewMockTeamUsecase(ctrl *gomock.Controller) *MockTeamUsecase {
	mock := &MockTeamUsecase{ctrl: ctrl}
	mock.recorder = &MockTeamUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamUsecase) EXPECT() *MockTeamUsecaseMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method.
func (m *MockTeamUsecase) AcceptInvitation(teamId, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", teamId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptInvitation indicates an expected call of AcceptInvitation.
func (mr *MockTeamUsecaseMockRecorder) AcceptInvitation(teamId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockTeamUsecase)(nil).AcceptInvitation), teamId, userId)
}

// CreateTeam mocks base method.
func (m *MockTeamUsecase) CreateTeam(name, userId string) (*entity.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", name, userId)
	ret0, _ := ret[0].(*entity.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockTeamUsecaseMockRecorder) CreateTeam(name, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockTeamUsecase)(nil).CreateTeam), name, userId)
}

// DeleteTeam mocks base method.
func (m *MockTeamUsecase) DeleteTeam(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockTeamUsecaseMockRecorder) DeleteTeam(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockTeamUsecase)(nil).DeleteTeam), id)
}

// GetAllTeams mocks base method.
func (m *MockTeamUsecase) GetAllTeams() ([]*entity.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeams")
	ret0, _ := ret[0].([]*entity.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeams indicates an expected call of GetAllTeams.
func (mr *MockTeamUsecaseMockRecorder) GetAllTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeams", reflect.TypeOf((*MockTeamUsecase)(nil).GetAllTeams))
}

// GetInvitedTeams mocks base method.
func (m *MockTeamUsecase) GetInvitedTeams(userId string) ([]*entity.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitedTeams", userId)
	ret0, _ := ret[0].([]*entity.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitedTeams indicates an expected call of GetInvitedTeams.
func (mr *MockTeamUsecaseMockRecorder) GetInvitedTeams(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitedTeams", reflect.TypeOf((*MockTeamUsecase)(nil).GetInvitedTeams), userId)
}

// GetMembersByTeamId mocks base method.
func (m *MockTeamUsecase) GetMembersByTeamId(teamId string) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersByTeamId", teamId)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersByTeamId indicates an expected call of GetMembersByTeamId.
func (mr *MockTeamUsecaseMockRecorder) GetMembersByTeamId(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersByTeamId", reflect.TypeOf((*MockTeamUsecase)(nil).GetMembersByTeamId), teamId)
}

// GetTeamsByUserId mocks base method.
func (m *MockTeamUsecase) GetTeamsByUserId(userId string) ([]*entity.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsByUserId", userId)
	ret0, _ := ret[0].([]*entity.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamsByUserId indicates an expected call of GetTeamsByUserId.
func (mr *MockTeamUsecaseMockRecorder) GetTeamsByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsByUserId", reflect.TypeOf((*MockTeamUsecase)(nil).GetTeamsByUserId), userId)
}

// InviteUsers mocks base method.
func (m *MockTeamUsecase) InviteUsers(teamId, userId string, targetUserEmails []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUsers", teamId, userId, targetUserEmails)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteUsers indicates an expected call of InviteUsers.
func (mr *MockTeamUsecaseMockRecorder) InviteUsers(teamId, userId, targetUserEmails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUsers", reflect.TypeOf((*MockTeamUsecase)(nil).InviteUsers), teamId, userId, targetUserEmails)
}

// RemoveMember mocks base method.
func (m *MockTeamUsecase) RemoveMember(teamId, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", teamId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockTeamUsecaseMockRecorder) RemoveMember(teamId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockTeamUsecase)(nil).RemoveMember), teamId, userId)
}

// UpdateTeam mocks base method.
func (m *MockTeamUsecase) UpdateTeam(id, name string) (*entity.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", id, name)
	ret0, _ := ret[0].(*entity.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockTeamUsecaseMockRecorder) UpdateTeam(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockTeamUsecase)(nil).UpdateTeam), id, name)
}
