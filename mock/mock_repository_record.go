// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/repository/record.go

// Package mock is a generated GoMock package.
package mock

import (
	model "CurlARC/internal/domain/model"
	response "CurlARC/internal/handler/response"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRecordRepository is a mock of RecordRepository interface.
type MockRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecordRepositoryMockRecorder
}

// MockRecordRepositoryMockRecorder is the mock recorder for MockRecordRepository.
type MockRecordRepositoryMockRecorder struct {
	mock *MockRecordRepository
}

// NewMockRecordRepository creates a new mock instance.
func NewMockRecordRepository(ctrl *gomock.Controller) *MockRecordRepository {
	mock := &MockRecordRepository{ctrl: ctrl}
	mock.recorder = &MockRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordRepository) EXPECT() *MockRecordRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRecordRepository) Delete(recordId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", recordId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordRepositoryMockRecorder) Delete(recordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordRepository)(nil).Delete), recordId)
}

// FindByRecordId mocks base method.
func (m *MockRecordRepository) FindByRecordId(recordId string) (*model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRecordId", recordId)
	ret0, _ := ret[0].(*model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRecordId indicates an expected call of FindByRecordId.
func (mr *MockRecordRepositoryMockRecorder) FindByRecordId(recordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRecordId", reflect.TypeOf((*MockRecordRepository)(nil).FindByRecordId), recordId)
}

// FindByTeamId mocks base method.
func (m *MockRecordRepository) FindByTeamId(teamId string) (*[]model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTeamId", teamId)
	ret0, _ := ret[0].(*[]model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTeamId indicates an expected call of FindByTeamId.
func (mr *MockRecordRepositoryMockRecorder) FindByTeamId(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTeamId", reflect.TypeOf((*MockRecordRepository)(nil).FindByTeamId), teamId)
}

// FindIndicesByTeamId mocks base method.
func (m *MockRecordRepository) FindIndicesByTeamId(teamId string) (*[]response.RecordIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIndicesByTeamId", teamId)
	ret0, _ := ret[0].(*[]response.RecordIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIndicesByTeamId indicates an expected call of FindIndicesByTeamId.
func (mr *MockRecordRepositoryMockRecorder) FindIndicesByTeamId(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIndicesByTeamId", reflect.TypeOf((*MockRecordRepository)(nil).FindIndicesByTeamId), teamId)
}

// Save mocks base method.
func (m *MockRecordRepository) Save(teamId, enemyTeamName, place string, result model.Result, date time.Time) (*model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", teamId, enemyTeamName, place, result, date)
	ret0, _ := ret[0].(*model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRecordRepositoryMockRecorder) Save(teamId, enemyTeamName, place, result, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRecordRepository)(nil).Save), teamId, enemyTeamName, place, result, date)
}

// Update mocks base method.
func (m *MockRecordRepository) Update(recordId string, updates model.RecordUpdate) (*model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", recordId, updates)
	ret0, _ := ret[0].(*model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRecordRepositoryMockRecorder) Update(recordId, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecordRepository)(nil).Update), recordId, updates)
}
