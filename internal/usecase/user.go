package usecase

import (
	"CurlARC/internal/domain/auth"
	"CurlARC/internal/domain/entity"
	"CurlARC/internal/domain/repository"
	"CurlARC/internal/utils"
	"context"
	"errors"
	"net/http"

	firebaseAuth "firebase.google.com/go/v4/auth"
)

type UserUsecase interface {
	// CRUD
	SignUp(ctx context.Context, idToken, name, email string) (*entity.User, error)
	SignIn(ctx context.Context, idToken string) (*entity.User, *http.Cookie, error)
	GetAllUsers(ctx context.Context) ([]*entity.User, error)
	GetUser(ctx context.Context, id string) (*entity.User, error)
	UpdateUser(ctx context.Context, id, name, email string) (*entity.User, error)
	DeleteUser(ctx context.Context, id string) error
}

type userUsecase struct {
	userRepo   repository.UserRepository
	authClient auth.AuthClient
}

func NewUserUsecase(userRepo repository.UserRepository, authCli auth.AuthClient) UserUsecase {
	return &userUsecase{userRepo: userRepo, authClient: authCli}
}

func (usecase *userUsecase) SignUp(
	ctx context.Context,
	idToken,
	name,
	email string,
) (
	*entity.User,
	error,
) {
	// veryfy the ID token
	token, err := usecase.authClient.VerifyIDToken(ctx, idToken)
	if err != nil {
		return nil, errors.New("invalid token")
	}

	user := entity.NewUser(*entity.NewUserId(token.UID), name, email)

	// save user to database
	savedUser, err := usecase.userRepo.Save(user)
	if err != nil {
		// dbへの保存が失敗したらfirebase上のユーザーも削除
		usecase.authClient.DeleteUser(ctx, token.UID)
		return nil, err
	}

	return savedUser, nil
}

func (usecase *userUsecase) SignIn(ctx context.Context, id_token string) (*entity.User, *http.Cookie, error) {
	// Verify the ID token whether it is generated by Firebase Auth
	authToken, err := usecase.authClient.VerifyIDToken(context.Background(), id_token)
	if err != nil {
		return nil, nil, errors.New("invalid token")
	}

	// Find the user by UID
	user, err := usecase.userRepo.FindById(authToken.UID)
	if err != nil {
		return nil, nil, errors.New("user not found")
	}

	// Generate jwt token
	jwt, err := utils.GenerateJWT(user.GetId().Value())
	if err != nil {
		return nil, nil, err
	}

	jwtCookie := http.Cookie{
		Name:     "jwt",
		Value:    jwt,
		HttpOnly: false,
		SameSite: http.SameSiteNoneMode,
		Secure:   true,
	}

	return user, &jwtCookie, nil
}

func (usecase *userUsecase) GetAllUsers(ctx context.Context) ([]*entity.User, error) {
	return usecase.userRepo.FindAll()
}

func (usecase *userUsecase) GetUser(ctx context.Context, id string) (*entity.User, error) {
	return usecase.userRepo.FindById(id)
}

func (usecase *userUsecase) UpdateUser(ctx context.Context, id, name, email string) (*entity.User, error) {
	// Check if the user exists
	_, err := usecase.userRepo.FindById(id)
	if err != nil {
		return nil, err
	}

	// update user info in firebase
	params := (&firebaseAuth.UserToUpdate{}).
		Email(email).
		DisplayName(name)

	_, err = usecase.authClient.UpdateUser(ctx, id, params)
	if err != nil {
		return nil, err
	}

	// update user info in database
	user := entity.NewUser(*entity.NewUserId(id), name, email)
	updatedUser, err := usecase.userRepo.Update(user)
	if err != nil {
		return nil, err
	}

	return updatedUser, err
}

func (usecase *userUsecase) DeleteUser(ctx context.Context, id string) error {
	// Firebase上のユーザー情報を削除
	err := usecase.authClient.DeleteUser(ctx, id)
	if err != nil {
		return err
	}

	return usecase.userRepo.Delete(id)
}
